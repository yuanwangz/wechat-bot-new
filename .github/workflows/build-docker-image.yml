name: Build and Push Docker Image (Simple)

on:
  push:
    branches: [ "main", "master" ]
    tags: [ 'v*.*.*' ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=semver,pattern={{version}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Prepare build context
      run: |
        mkdir -p build/buiding/injector-box/root/bin || true
        
        # Â§çÂà∂ÂøÖË¶ÅÊñá‰ª∂
        [ -f "build/funtool/funtool.4.0.0.26.disable.auto.update.exe" ] && cp build/funtool/funtool.4.0.0.26.disable.auto.update.exe build/buiding/injector-box/root/bin/ || echo "funtool.exe not found"
        [ -f "build/funtool/inject-dll" ] && cp build/funtool/inject-dll build/buiding/injector-box/root/bin/ || echo "inject-dll not found"  
        [ -f "build/funtool/inject-monitor" ] && cp build/funtool/inject-monitor build/buiding/injector-box/root/bin/ || echo "inject-monitor not found"
        
        echo "Files in build context:"
        ls -la build/buiding/injector-box/root/bin/

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: build/buiding/injector-box
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Success notification
      run: |
        echo "‚úÖ Build completed successfully!"
        echo "üì¶ Image pushed to: ${{ steps.meta.outputs.tags }}"